import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –ò–∑–º–µ–Ω–µ–Ω–æ —Å INFO –Ω–∞ DEBUG
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[
        logging.FileHandler('bot_debug.log', encoding='utf-8', mode='w'),
        logging.StreamHandler()
    ]
)

import os
import uuid
import json
import qrcode
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import FSInputFile, ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv
from database import Database
from wg_easy_api import WGEasyAPI
from config_manager import ConfigManager, Config
import fcntl
import atexit

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = Bot(token=os.getenv('BOT_TOKEN'))
db = Database('vpn_bot.db')
wg_api = None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
config = Config()
config_manager = ConfigManager(os.path.dirname(os.path.abspath(__file__)), config)

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID'))

# –¶–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ (–≤ —Ä—É–±–ª—è—Ö)
PRICE_TEST = 1
PRICE_26_HOURS = 50
PRICE_1_WEEK = 149
PRICE_1_MONTH = 199
PRICE_3_MONTHS = 399
PRICE_6_MONTHS = 1199
PRICE_12_MONTHS = 1999

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class PaymentStates(StatesGroup):
    waiting_for_payment_method = State()
    waiting_for_screenshot = State()

# –°–æ–∑–¥–∞–µ–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
notification_sent = {}

def ensure_single_instance():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—É—Å–∫ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞"""
    try:
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        lock_file = open("/tmp/vpn_bot.lock", "w")
        fcntl.lockf(lock_file, fcntl.LOCK_EX | fcntl.LOCK_NB)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        def cleanup():
            try:
                lock_file.close()
                os.unlink("/tmp/vpn_bot.lock")
            except:
                pass
        atexit.register(cleanup)
        
        return True
    except IOError:
        logging.error("–î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return False

# –•—ç–Ω–¥–ª–µ—Ä—ã
@dp.message(Command("start"))
async def handle_start(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy"),
                types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="status")
            ],
            [
                types.InlineKeyboardButton(text="üîê –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="my_data"),
                types.InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
    )
    
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SAFEVPN!\n\n"
        "üåê –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN-—Å–µ—Ä–≤–∏—Å.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )
    await state.clear()

@dp.callback_query(lambda c: c.data == "buy")
async def show_subscription_menu(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=f"26 —á–∞—Å–æ–≤ - {PRICE_26_HOURS}‚ÇΩ", callback_data="sub_26h")],
            [types.InlineKeyboardButton(text=f"1 –Ω–µ–¥–µ–ª—è - {PRICE_1_WEEK}‚ÇΩ", callback_data="sub_week")],
            [
                types.InlineKeyboardButton(text=f"1 –º–µ—Å—è—Ü - {PRICE_1_MONTH}‚ÇΩ", callback_data="sub_1"),
                types.InlineKeyboardButton(text=f"3 –º–µ—Å—è—Ü–∞ - {PRICE_3_MONTHS}‚ÇΩ", callback_data="sub_3")
            ],
            [
                types.InlineKeyboardButton(text=f"6 –º–µ—Å—è—Ü–µ–≤ - {PRICE_6_MONTHS}‚ÇΩ", callback_data="sub_6"),
                types.InlineKeyboardButton(text=f"12 –º–µ—Å—è—Ü–µ–≤ - {PRICE_12_MONTHS}‚ÇΩ", callback_data="sub_12")
            ],
            [types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )
    
    await callback_query.message.edit_text(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "status")
async def show_subscription_status(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏"""
    user_id = callback_query.from_user.id
    subscription = db.get_subscription(user_id)
    
    if not subscription:
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(
                        text="–ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                        callback_data="buy"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="¬´ –ù–∞–∑–∞–¥",
                        callback_data="back_to_main"
                    )
                ]
            ]
        )
        await callback_query.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=keyboard
        )
        return
    
    expiration_str = subscription['expiration']
    expiration_time = datetime.strptime(expiration_str.split('.')[0], '%Y-%m-%d %H:%M:%S')
    time_left = expiration_time - datetime.now()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
    client_config = db.get_client_config(user_id)
    if not client_config:
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="¬´ –ù–∞–∑–∞–¥",
                        callback_data="back_to_main"
                    )
                ]]
            )
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ WireGuard
    client = await wg_api.get_client(client_config.get('config_name'))
    subscription_status = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞" if subscription['is_active'] else "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data="extend_subscription"
                )
            ],
            [
                types.InlineKeyboardButton(
                    text="¬´ –ù–∞–∑–∞–¥",
                    callback_data="back_to_main"
                )
            ]
        ]
    )
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
    days = time_left.days
    hours = time_left.seconds // 3600
    
    await callback_query.message.edit_text(
        f"üìä –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiration_str.split('.')[0]}\n"
        f"üîê –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_status}\n"
        f"‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: {days} –¥–Ω–µ–π –∏ {hours} —á–∞—Å–æ–≤",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "help")
async def show_help(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å"""
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
    )
    
    await callback_query.message.edit_text(
        "‚ùì –ü–æ–º–æ—â—å\n\n"
        "üîπ –ö–∞–∫ –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:\n"
        "1. –ù–∞–∂–º–∏—Ç–µ 'üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'\n"
        "2. –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
        "3. –û–ø–ª–∞—Ç–∏—Ç–µ –∫–∞—Ä—Ç–æ–π\n"
        "4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞\n\n"
        "üîπ –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è:\n"
        "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard\n"
        "2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª\n"
        "3. –í–∫–ª—é—á–∏—Ç–µ VPN\n\n"
        "üîπ –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main_menu(callback_query: types.CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy"),
                types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="status")
            ],
            [
                types.InlineKeyboardButton(text="üîê –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="my_data"),
                types.InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
    )
    
    await callback_query.message.edit_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SAFEVPN!\n\n"
        "üåê –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏ –±—ã—Å—Ç—Ä—ã–π VPN-—Å–µ—Ä–≤–∏—Å.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.message(Command("clear_data"))
async def handle_admin_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /clear_data"""
    if message.from_user.id != ADMIN_USER_ID:
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        db.clear_all_data()
        await message.answer("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        logging.error(f"Error clearing database: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")

@dp.callback_query(lambda c: c.data == "action_subscribe")
async def process_subscribe_action(callback: types.CallbackQuery, state: FSMContext):
    if db.check_subscription(callback.from_user.id):
        end_date = db.get_subscription_end_date(callback.from_user.id)
        await callback.message.edit_text(
            f"–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {end_date.strftime('%d.%m.%Y')}.\n"
            "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?",
            reply_markup=get_subscription_keyboard()
        )
    else:
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏:",
            reply_markup=get_subscription_keyboard()
        )
    await state.set_state(PaymentStates.waiting_for_payment_method)
    await callback.answer()

@dp.callback_query(lambda c: c.data == "action_status")
async def process_status_action(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    subscription = db.get_subscription(user_id)
    
    if subscription:
        try:
            # –û–±—Ä–µ–∑–∞–µ–º –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥—ã –∏–∑ –¥–∞—Ç—ã
            end_date_str = subscription[4].split('.')[0]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å 4 –¥–ª—è end_date
            end_date = datetime.strptime(end_date_str, '%Y-%m-%d %H:%M:%S')
            
            now = datetime.now()
            remaining_time = end_date - now
            remaining_days = remaining_time.days
            
            if remaining_days > 0:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                if remaining_days >= 365:
                    years = remaining_days // 365
                    days = remaining_days % 365
                    time_str = f"{years} –≥–æ–¥(–∞) –∏ {days} –¥–Ω–µ–π"
                elif remaining_days >= 30:
                    months = remaining_days // 30
                    days = remaining_days % 30
                    time_str = f"{months} –º–µ—Å—è—Ü(–µ–≤) –∏ {days} –¥–Ω–µ–π"
                else:
                    time_str = f"{remaining_days} –¥–Ω–µ–π"
                
                await callback.message.answer(
                    f"üîì –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n\n"
                    f"üìÖ –û—Å—Ç–∞–ª–æ—Å—å: {time_str}\n"
                    f"üìÜ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {end_date.strftime('%d.%m.%Y %H:%M')}\n"
                    f"üîë –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {subscription[2]}"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–µ–∫—Å 2 –¥–ª—è config_name
                )
            else:
                await callback.message.answer(
                    "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞\n\n"
                    "–î–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ö—É–ø–∏—Ç—å¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
                )
        except Exception as e:
            logging.error(f"Error processing subscription status: {e}")
            await callback.message.answer(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
            )
    else:
        await callback.message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            "–î–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ö—É–ø–∏—Ç—å¬ª –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é"
        )
    
    await callback.answer()

@dp.callback_query(lambda c: c.data == "action_help")
async def process_help_action(callback: types.CallbackQuery):
    help_text = (
        "üîç –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
        "üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É - –û—Ñ–æ—Ä–º–∏—Ç—å –∏–ª–∏ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "üìä –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å\n"
        "‚ùì –ü–æ–º–æ—â—å - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: @support"
    )
    await callback.message.edit_text(
        help_text,
        reply_markup=get_main_keyboard()
    )
    await callback.answer()

@dp.callback_query(lambda c: c.data.startswith("sub_"))
async def process_subscription_duration(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–ª—è sub_menu
    if callback_query.data == 'sub_menu':
        return
        
    try:
        duration_str = callback_query.data.split('_')[1]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if duration_str == '0':
            duration = 0
            duration_text = "5 –º–∏–Ω—É—Ç (—Ç–µ—Å—Ç)"
            price = PRICE_TEST
            days = 0  # 5 –º–∏–Ω—É—Ç
        elif duration_str == '26h':
            duration = 1.08  # –∏—Å–ø–æ–ª—å–∑—É–µ–º 1.08 –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è 26 —á–∞—Å–æ–≤
            duration_text = "26 —á–∞—Å–æ–≤"
            price = PRICE_26_HOURS
            days = 1.08
        elif duration_str == 'week':
            duration = 7
            duration_text = "1 –Ω–µ–¥–µ–ª—è"
            price = PRICE_1_WEEK
            days = 7
        elif duration_str == '1':
            duration = 1
            duration_text = "1 –º–µ—Å—è—Ü"
            price = PRICE_1_MONTH
            days = 30
        elif duration_str == '3':
            duration = 3
            duration_text = "3 –º–µ—Å—è—Ü–∞"
            price = PRICE_3_MONTHS
            days = 90
        elif duration_str == '6':
            duration = 6
            duration_text = "6 –º–µ—Å—è—Ü–µ–≤"
            price = PRICE_6_MONTHS
            days = 180
        elif duration_str == '12':
            duration = 12
            duration_text = "12 –º–µ—Å—è—Ü–µ–≤"
            price = PRICE_12_MONTHS
            days = 365
        else:
            await callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
            return
        
        logging.info("Processing subscription duration. Callback data: %s", callback_query.data)
        logging.info("Duration: %s days: %s", duration, days)
        logging.info("Duration text: %s, Price: %s", duration_text, price)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(duration=duration, amount=price, days=days)
        logging.info("State after update: %s", await state.get_data())
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞", callback_data="pay_card")],
                [types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="sub_menu")]
            ]
        )
        
        await callback_query.message.edit_text(
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: {price}‚ÇΩ\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=keyboard
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.set_state(PaymentStates.waiting_for_payment_method)
        logging.info("New state: %s", PaymentStates.waiting_for_payment_method)
        
    except ValueError:
        logging.error(f"Invalid subscription duration: {callback_query.data}")
        await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")

@dp.callback_query(lambda c: c.data.startswith("pay_"))
async def process_payment_method(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    logging.info("Processing payment method selection")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    state_data = await state.get_data()
    logging.info("Current state data: %s", state_data)
    
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="sub_menu")]
        ]
    )
    
    card_info = (
        "üí≥ –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π\n\n"
        "–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {amount}‚ÇΩ –Ω–∞ –∫–∞—Ä—Ç—É:\n"
        "2202 2024 3331 7260\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞."
    ).format(amount=state_data['amount'])
    
    await callback_query.message.edit_text(card_info, reply_markup=keyboard)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(PaymentStates.waiting_for_screenshot)
    logging.info("New state: %s", PaymentStates.waiting_for_screenshot)

@dp.message(PaymentStates.waiting_for_screenshot)
async def process_payment_screenshot(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã"""
    if not message.photo:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã.\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return

    try:
        state_data = await state.get_data()
        duration = state_data.get('duration')
        amount = state_data.get('amount')

        if duration is None or amount is None:
            await message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"
                "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /start"
            )
            await state.clear()
            return

        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_id = str(uuid.uuid4())
        duration_months = float(duration)  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–µ—Å—è—Ü—ã
        
        try:
            if not db.add_payment(payment_id, message.from_user.id, float(amount), duration_months):
                await message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                )
                return
        except Exception as e:
            logging.error(f"Failed to add payment to database: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        duration_text = (
            "5 –º–∏–Ω—É—Ç (—Ç–µ—Å—Ç)" if duration == 0 else
            f"{duration} {'–º–µ—Å—è—Ü' if duration == 1 else '–º–µ—Å—è—Ü–∞' if duration in [2,3,4] else '–º–µ—Å—è—Ü–µ–≤'}"
        )

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm:{payment_id}"),
                    types.InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject:{payment_id}")
                ]
            ]
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω—É
        await bot.send_photo(
            ADMIN_USER_ID,
            message.photo[-1].file_id,
            caption=(
                "üîÑ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂\n\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id}\n"
                f"üí∞ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
                f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_text}\n"
                f"üÜî ID –ø–ª–∞—Ç–µ–∂–∞: {payment_id}"
            ),
            reply_markup=keyboard
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚úÖ –°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω!\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
            "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –≤–∞—à –ø–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω."
        )
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logging.error(f"Error processing payment screenshot: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

@dp.callback_query(lambda c: c.data.startswith(("confirm:", "reject:")))
async def process_payment_verification(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–æ–º"""
    user_id = callback_query.from_user.id
    
    if user_id != ADMIN_USER_ID:
        await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    try:
        action, payment_id = callback_query.data.split(':')
        payment_data = db.get_payment(payment_id)
        
        if not payment_data:
            await callback_query.answer("‚ùå –ü–ª–∞—Ç—ë–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        payment_id, user_id, amount, duration, status, created_at = payment_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–ª–∞—Ç–µ–∂ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω
        if status != 'pending':
            await callback_query.answer("‚ùå –≠—Ç–æ—Ç –ø–ª–∞—Ç—ë–∂ —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            return
            
        if action == "confirm":
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
                db.update_payment_status(payment_id, "confirmed")
                logging.info(f"Updated payment {payment_id} status to confirmed")
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                current_subscription = db.get_subscription(user_id)
                client_name = f"user_{user_id}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
                client_config = db.get_client_config(user_id)
                
                # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏), —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                if not client_config:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ WireGuard
                    client = await wg_api.create_client(client_name)
                    if not client:
                        raise Exception("Failed to create WireGuard client")
                    logging.info(f"Created client: {json.dumps(client, indent=2)}")
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    config = await wg_api.generate_config(client)
                    if not config or 'config' not in config:
                        raise Exception("Failed to generate client config")
                    logging.info("Generated client configuration")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                    db.save_client_config(user_id, {
                        'config_name': client_name,
                        'config': config['config'],
                        'qr_code': config.get('qr_code')  # qr_code –º–æ–∂–µ—Ç –±—ã—Ç—å None
                    })
                    logging.info("Saved client configuration to database")
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                duration_days = duration * 30 if duration > 0 else 1  # 1 –¥–µ–Ω—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
                if not db.add_subscription(user_id, duration_days):
                    raise Exception("Failed to add subscription")
                logging.info(f"Added/extended subscription for {duration_days} days")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                subscription = db.get_subscription(user_id)
                if subscription:
                    expiration_date = datetime.strptime(subscription['expiration'].split('.')[0], '%Y-%m-%d %H:%M:%S')
                    keyboard = types.InlineKeyboardMarkup(
                        inline_keyboard=[
                            [types.InlineKeyboardButton(text="üîë –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", callback_data="show_data")]
                        ]
                    )
                    await bot.send_message(
                        user_id,
                        f"‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!\n\n"
                        f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {expiration_date.strftime('%d.%m.%Y %H:%M')}",
                        reply_markup=keyboard
                    )
                    logging.info(f"Sent confirmation message to user {user_id}")
                
                # –û—Ç–≤–µ—á–∞–µ–º –∞–¥–º–∏–Ω—É
                await callback_query.message.edit_caption(
                    callback_query.message.caption + "\n\n‚úÖ –ü–ª–∞—Ç—ë–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω",
                    reply_markup=None
                )
                logging.info("Updated admin's message")
                
            except Exception as e:
                logging.error(f"Error confirming payment: {e}", exc_info=True)
                await callback_query.message.reply(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {str(e)}")
                return
                
        elif action == "reject":
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            db.update_payment_status(payment_id, "rejected")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(
                user_id,
                "‚ùå –í–∞—à –ø–ª–∞—Ç—ë–∂ –±—ã–ª –æ—Ç–∫–ª–æ–Ω—ë–Ω.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø–ª–∞—Ç—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            
            # –û—Ç–≤–µ—á–∞–µ–º –∞–¥–º–∏–Ω—É
            await callback_query.message.edit_caption(
                callback_query.message.caption + "\n\n‚ùå –ü–ª–∞—Ç—ë–∂ –æ—Ç–∫–ª–æ–Ω—ë–Ω",
                reply_markup=None
            )
            
        await callback_query.answer()
        
    except Exception as e:
        logging.error(f"Error processing payment verification: {e}", exc_info=True)
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞")

async def check_expired_subscriptions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –∏—Å—Ç–µ–∫—à–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    while True:
        try:
            logging.info("Checking for expired subscriptions...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            expired_subscriptions = db.get_expired_subscriptions()
            
            for sub in expired_subscriptions:
                try:
                    client_name = f"user_{sub['user_id']}"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                    max_retries = 3
                    for attempt in range(max_retries):
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤
                            clients = await wg_api.get_clients()
                            existing_client = None
                            for client in clients:
                                if client['name'] == client_name:
                                    existing_client = client
                                    break
                            
                            if existing_client:
                                client = existing_client
                                logging.info(f"Using existing client: {json.dumps(client, indent=2)}")
                            else:
                                # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω (–±—ã–ª —É–¥–∞–ª–µ–Ω), —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ
                                client = await wg_api.create_client(client_name)
                                logging.info(f"Created new client: {json.dumps(client, indent=2)}")
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                            if client.get('enabled', False):
                                # –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                                response = await wg_api.update_client(client_name, enable=False)
                                logging.info(f"WireGuard API response: {response}")
                                if response:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
                                    logging.info(f"Successfully disabled WireGuard client {client_name} on attempt {attempt + 1}")
                                    break
                            else:
                                logging.info(f"Client {client_name} is already disabled")
                                break
                        
                        except Exception as e:
                            if attempt < max_retries - 1:
                                logging.error(f"Error disabling client on attempt {attempt + 1}: {e}")
                                await asyncio.sleep(1)  # –ø–∞—É–∑–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
                            else:
                                logging.error(f"Failed to disable client after {max_retries} attempts: {e}")
                    
                    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ
                    db.deactivate_subscription(sub['user_id'])
                    logging.info(f"Deactivated subscription in database for user {sub['user_id']}")
                    
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                    config_manager.cleanup_old_configs(sub['user_id'])
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    if not notification_sent.get(sub['user_id'], {}).get('expired'):
                        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                            [types.InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")]
                        ])
                        
                        await bot.send_message(
                            sub['user_id'],
                            "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!\n"
                            "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.",
                            reply_markup=keyboard
                        )
                        notification_sent[sub['user_id']] = {'expired': True}
                        logging.info(f"- –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {sub['user_id']}")
                    
                except Exception as e:
                    logging.error(f"Error processing expired subscription {sub['id']}: {e}")
                    continue
            
        except Exception as e:
            logging.error(f"Error checking expired subscriptions: {e}")
        
        await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def check_subscriptions():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_sent
    
    # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏
    if hasattr(check_subscriptions, 'is_running') and check_subscriptions.is_running:
        logging.warning("check_subscriptions —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–ø—É—Å–∫")
        return
        
    check_subscriptions.is_running = True
    logging.info("=== –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ ===")
    
    CHECK_INTERVAL = 3600  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
    
    while True:
        try:
            current_time = datetime.now()
            logging.info(f"=== –ù–æ–≤—ã–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫: {current_time} ===")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ WireGuard
            active_subscriptions = db.get_active_subscriptions()
            clients = await wg_api.get_clients()
            logging.info(f"–ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: {len(active_subscriptions)}")
            
            for sub in active_subscriptions:
                try:
                    user_id = sub['user_id']
                    expiration = datetime.strptime(str(sub['expiration']).split('.')[0], '%Y-%m-%d %H:%M:%S')
                    time_left = expiration - current_time
                    hours_left = time_left.total_seconds() / 3600
                    
                    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞
                    if time_left.total_seconds() <= 0:
                        await handle_expired_subscription(user_id, sub, clients)
                        continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∑–∞ 24 —á–∞—Å–∞ –¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è
                    # –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
                    if 23 <= hours_left <= 24 and not notification_sent.get(user_id, {}).get('24h_warning'):
                        await send_warning_notification(user_id, time_left, "24 —á–∞—Å–∞")
                        if user_id not in notification_sent:
                            notification_sent[user_id] = {}
                        notification_sent[user_id]['24h_warning'] = True
                        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                    continue
            
            # –ñ–¥–µ–º —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            await asyncio.sleep(CHECK_INTERVAL)
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ check_subscriptions: {e}")
            await asyncio.sleep(CHECK_INTERVAL)

async def handle_expired_subscription(user_id: int, sub: dict, clients: list):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        client_name = f"user_{user_id}"
        logging.info(f">>> –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}")
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        max_retries = 3
        for attempt in range(max_retries):
            try:
                client_found = False
                for client in clients:
                    if client['name'] == client_name:
                        client_found = True
                        if client.get('enabled', False):
                            response = await wg_api.update_client(client_name, enable=False)
                            logging.info(f"WireGuard API response: {response}")
                            if response:
                                logging.info(f"Successfully disabled WireGuard client {client_name}")
                                break
                        else:
                            logging.info(f"Client {client_name} is already disabled")
                            break
                
                if not client_found:
                    logging.warning(f"Client {client_name} not found in WireGuard")
                break
                
            except Exception as e:
                if attempt < max_retries - 1:
                    logging.error(f"Error disabling client on attempt {attempt + 1}: {e}")
                    await asyncio.sleep(1)
                else:
                    logging.error(f"Failed to disable client after {max_retries} attempts: {e}")
        
        # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É –≤ –±–∞–∑–µ
        db.deactivate_subscription(user_id)
        logging.info(f"- –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –≤ –±–∞–∑–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_manager.cleanup_old_configs(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        if not notification_sent.get(user_id, {}).get('expired'):
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                [types.InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")]
            ])
            
            await bot.send_message(
                user_id,
                "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞!\n"
                "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è VPN –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.",
                reply_markup=keyboard
            )
            if user_id not in notification_sent:
                notification_sent[user_id] = {}
            notification_sent[user_id]['expired'] = True
            logging.info(f"- –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–µ–∫—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è {user_id}: {e}")

async def send_warning_notification(user_id: int, time_left: timedelta, time_text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ —Å–∫–æ—Ä–æ–º –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
        [types.InlineKeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")]
    ])
    
    await bot.send_message(
        user_id,
        f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ VPN –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {time_text}!\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—Ç–∫–ª—é—á–µ–Ω–∏—è.",
        reply_markup=keyboard
    )
    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —á–µ—Ä–µ–∑ {time_text}")

def update_notification_status(user_id: int, notification_key: str):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global notification_sent
    if user_id not in notification_sent:
        notification_sent[user_id] = {}
    notification_sent[user_id][notification_key] = True

async def process_subscription_extension(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
    subscription = db.get_subscription(callback_query.from_user.id)
    
    if not subscription:
        await callback_query.message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text=f"26 —á–∞—Å–æ–≤ - {PRICE_26_HOURS}‚ÇΩ", callback_data="sub_26h")],
            [types.InlineKeyboardButton(text=f"1 –Ω–µ–¥–µ–ª—è - {PRICE_1_WEEK}‚ÇΩ", callback_data="sub_week")],
            [
                types.InlineKeyboardButton(text=f"1 –º–µ—Å—è—Ü - {PRICE_1_MONTH}‚ÇΩ", callback_data="sub_1"),
                types.InlineKeyboardButton(text=f"3 –º–µ—Å—è—Ü–∞ - {PRICE_3_MONTHS}‚ÇΩ", callback_data="sub_3")
            ],
            [
                types.InlineKeyboardButton(text=f"6 –º–µ—Å—è—Ü–µ–≤ - {PRICE_6_MONTHS}‚ÇΩ", callback_data="sub_6"),
                types.InlineKeyboardButton(text=f"12 –º–µ—Å—è—Ü–µ–≤ - {PRICE_12_MONTHS}‚ÇΩ", callback_data="sub_12")
            ],
            [types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )
    
    await callback_query.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=keyboard
    )

@dp.message(Command("status"))
async def status_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status"""
    user_id = message.from_user.id
    subscription = db.get_subscription(user_id)
    
    if not subscription:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏."
        )
        return
    
    sub_id, user_id, config_name, expiration_str, created_at, is_active = subscription
    expiration_time = datetime.strptime(expiration_str.split('.')[0], '%Y-%m-%d %H:%M:%S')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ WireGuard
    client = await wg_api.get_client(config_name)
    connection_status = "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω" if client and client.get('enabled', False) else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [
                types.InlineKeyboardButton(
                    text="–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
                    callback_data="extend_subscription"
                )
            ]
        ]
    )
    
    await message.answer(
        f"üìä –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:\n\n"
        f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {expiration_time.strftime('%d.%m.%Y %H:%M')}\n"
        f"üîå –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connection_status}\n\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å: {(expiration_time - datetime.now()).days} –¥–Ω–µ–π",
        reply_markup=keyboard
    )

@dp.message(Command("check_db"))
async def check_database(message: types.Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if message.from_user.id != ADMIN_USER_ID:
        return
        
    try:
        cursor = db.conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        response = "üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n"
        
        for table in tables:
            table_name = table[0]
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            response += f"–¢–∞–±–ª–∏—Ü–∞ {table_name}: {count} –∑–∞–ø–∏—Å–µ–π\n"
            
            if table_name == 'subscriptions':
                cursor.execute("""
                    SELECT user_id, expiration, is_active 
                    FROM subscriptions 
                    ORDER BY created_at DESC 
                    LIMIT 5
                """)
                subs = cursor.fetchall()
                if subs:
                    response += "\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
                    for sub in subs:
                        response += f"User {sub[0]}: –¥–æ {sub[1]} (active: {sub[2]})\n"
        
        await message.answer(response)
        
    except Exception as e:
        logging.error(f"Error checking database: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")

async def init_wg_api():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WireGuard API"""
    global wg_api
    
    host = os.getenv('WG_HOST')
    port = os.getenv('WG_API_PORT')
    password = os.getenv('WG_API_PASSWORD')
    
    logging.debug(f"WG API Configuration - Host: {host}, Port: {port}, Password length: {len(password) if password else 0}")
    
    if not all([host, port, password]):
        logging.error("Missing required WireGuard API configuration")
        return False
    
    wg_api = WGEasyAPI(host, port, password)
    
    try:
        # –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        if await wg_api._login():
            logging.info("Successfully connected to WireGuard API")
            return True
        else:
            logging.error("Failed to login to WireGuard API")
            return False
    except Exception as e:
        logging.error(f"Exception during WireGuard API initialization: {str(e)}")
        return False

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not ensure_single_instance():
        logging.error("–í—ã—Ö–æ–¥: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        return

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WireGuard API
        if not await init_wg_api():
            logging.error("Failed to initialize WireGuard API. Exiting...")
            return
            
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –∫–æ–º–∞–Ω–¥
        dp.message.register(handle_start, Command("start"))
        dp.message.register(status_command, Command("status"))
        dp.message.register(check_database, Command("check_db"))
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        dp.message.register(process_payment_screenshot, PaymentStates.waiting_for_screenshot)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ callback_query
        dp.callback_query.register(show_subscription_menu, lambda c: c.data == "buy")
        dp.callback_query.register(show_subscription_status, lambda c: c.data == "status")
        dp.callback_query.register(show_help, lambda c: c.data == "help")
        dp.callback_query.register(back_to_main_menu, lambda c: c.data == "back_to_main")
        dp.callback_query.register(process_subscription_duration, lambda c: c.data.startswith('sub_') and c.data != 'sub_menu')
        dp.callback_query.register(process_payment_method, lambda c: c.data.startswith('pay_'))
        dp.callback_query.register(process_payment_verification, lambda c: c.data.startswith(("confirm:", "reject:")))
        dp.callback_query.register(process_subscription_extension, lambda c: c.data == "extend_subscription")
        dp.callback_query.register(show_user_data, lambda c: c.data == "my_data")
        dp.callback_query.register(show_connection_data, lambda c: c.data == "show_connection_data")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"Error starting bot: {e}")
        raise

@dp.callback_query(lambda c: c.data == "my_data")
async def show_user_data(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    user_id = callback_query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    subscription = db.get_subscription(user_id)
    if not subscription:
        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="üí≥ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="buy")],
                [types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
            ]
        )
        await callback_query.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n"
            "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É.",
            reply_markup=keyboard
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã
    config = db.get_client_config(user_id)
    if not config:
        await callback_query.message.edit_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
                ]]
            )
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    message_text = (
        "üì± <b>–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</b>\n\n"
        "1Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard:\n"
        "‚Ä¢ <a href='https://apps.apple.com/us/app/wireguard/id1441195209'>iOS</a>\n"
        "‚Ä¢ <a href='https://play.google.com/store/apps/details?id=com.wireguard.android'>Android</a>\n"
        "‚Ä¢ <a href='https://download.wireguard.com/windows-client/wireguard-installer.exe'>Windows</a>\n\n"
        "2Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n"
        "‚Ä¢ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥\n"
        "‚Ä¢ –ò–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ —Ñ–∞–π–ª .conf"
    )

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = types.InlineKeyboardMarkup(
        inline_keyboard=[
            [types.InlineKeyboardButton(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", callback_data="show_config")],
            [types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
    )

    # –ï—Å–ª–∏ –µ—Å—Ç—å QR-–∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
    if config.get('qr_code'):
        await callback_query.message.answer_photo(
            photo=types.BufferedInputFile(
                config['qr_code'].encode(),
                filename="config.png"
            ),
            caption=message_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
        await callback_query.message.delete()
    else:
        # –ï—Å–ª–∏ QR-–∫–æ–¥–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await callback_query.message.edit_text(
            message_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

@dp.callback_query(lambda c: c.data == "show_config")
async def show_config(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    user_id = callback_query.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã
    config = db.get_client_config(user_id)
    if not config or 'config' not in config:
        await callback_query.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ
    await callback_query.message.answer(
        "<code>" + config['config'] + "</code>",
        parse_mode="HTML",
        reply_markup=types.InlineKeyboardMarkup(
            inline_keyboard=[[
                types.InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="show_data")
            ]]
        )
    )
    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "show_connection_data")
async def show_connection_data(callback_query: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    try:
        user_id = callback_query.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
        subscription = db.get_subscription(user_id)
        if not subscription:
            await callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏")
            return
            
        if not db.check_subscription(user_id):
            await callback_query.answer("‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client_name = f"user_{user_id}"
        try:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
            client_config = db.get_client_config(user_id)
            if client_config and client_config['config_path'] and client_config['qr_path']:
                logging.info(f"Using saved configuration for user {user_id}")
                config_path = client_config['config_path']
                qr_path = client_config['qr_path']
            else:
                # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                clients = await wg_api.get_clients()
                existing_client = None
                for client in clients:
                    if client['name'] == client_name:
                        # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                        logging.info(f"Removing existing client: {client_name}")
                        await wg_api.remove_client(client['id'])
                        break
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
                client = await wg_api.create_client(client_name)
                logging.info(f"Created new client: {client_name}")
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
                config = await wg_api.generate_config(client)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ ConfigManager
                config_path, qr_path = config_manager.save_config(user_id, config, client_name)
                
                if not config_path or not qr_path:
                    raise Exception("Failed to save configuration files")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                db.save_client_config(user_id, {
                    'private_key': client['privateKey'],
                    'public_key': client['publicKey'],
                    'pre_shared_key': client['preSharedKey'],
                    'config_path': config_path,
                    'qr_path': qr_path
                })
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            await bot.send_document(
                user_id,
                FSInputFile(config_path),
                caption="üìù –í–∞—à —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ WireGuard"
            )
            
            await bot.send_photo(
                user_id,
                FSInputFile(qr_path),
                caption="üîê –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            )
            
            await callback_query.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logging.error(f"Error generating configuration: {e}")
            await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
            return
            
    except Exception as e:
        logging.error(f"Error showing connection data: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")        

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("Bot stopped")
    except Exception as e:
        logging.error(f"Fatal error: {e}")
